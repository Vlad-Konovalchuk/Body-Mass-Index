{"version":3,"sources":["components/Range.js","components/Output.js","App.js","serviceWorker.js","index.js"],"names":["Range","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","state","value","setState","target","_this$props","max","min","step","react_default","a","createElement","className","type","Component","defaultProps","Output","_this$props$data","data","height","weight","bmi","bmiClass","href","App","heightChange","setBmi","weightChange","toFixed","setBmiClass","_this$state","components_Range","components_Output","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ffb76ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Range extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      value:props.value\r\n    }\r\n  }\r\n\r\nstatic defaultProps = {\r\n  min: 0,\r\n  max: 245,\r\n  step: 1\r\n}\r\n\r\nonChange = (event) => {\r\n  this.props.onChange(this.state.value)\r\n  this.setState({value: event.target.value});\r\n}\r\n  render() {\r\n    const {value} = this.state;\r\n    const {max,min,step} = this.props;\r\n\r\n    return (\r\n      <div className=\"range\">\r\n      <input \r\n        type=\"range\"\r\n        value={value}\r\n        max= {max}\r\n        min = {min}\r\n        step = {step}\r\n        onChange = {this.onChange}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRange.propTypes  = {\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  step: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Range; ","import React, { Component } from 'react';\r\n\r\nclass Output extends Component {\r\n\r\n  render() {\r\n\r\n    let{height,weight,bmi,bmiClass} = this.props.data;\r\n\r\n    return (\r\n      <div className=\"output\">\r\n      <h3>{height}</h3>\r\n      <h3>{weight}</h3>\r\n      <h3>{bmi}</h3>\r\n      <h3 className={bmiClass === 'Obese' ? \"danger\" : \"\"}>{bmiClass}\r\n      {bmiClass === 'Obese' ? \r\n      <a href='https://www.who.int/topics/obesity/en/'>What Can You do ?</a> : \"\"}\r\n      </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;","import React, { Component } from 'react';\nimport './App.css';\nimport Range from './components/Range';\nimport Output from './components/Output';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      height:170,\n      weight:65,\n      bmi: 22.49,\n      bmiClass: 'Normal'\n    }\n  }\n\nheightChange = (height) => {\n  this.setState({height : height },this.setBmi);\n} \n\nweightChange = (weight) => {\n  this.setState({weight : weight },this.setBmi);\n}  \n\nsetBmi () {\n  let bmi = ((this.state.weight / this.state.height/ this.state.height) * 1000).toFixed(2);\n  this.setState({bmi:bmi,bmiClass: this.setBmiClass(bmi)})\n}\n\nsetBmiClass(bmi){\n  if(bmi < 18.5 ) return \"Underweight\";\n  if(bmi >= 18.5 && bmi <= 24.9 ) return \"Normal\";\n  if(bmi >= 25 && bmi <= 29.9 ) return \"Overweight\";\n  if(bmi >= 30) return \"Obese\";\n}\n\n  render(){\n    const {height,weight} = this.state;\n\n    return (\n      <div className=\"App\">\n      <h1>BMI Calculator</h1>\n      <form >\n        <div>\n          <label>Height</label>\n          <Range value={height} onChange={this.heightChange}/>\n        </div>\n        <div>\n          <label>Weight</label>\n          <Range value={weight} onChange={this.weightChange}/>\n        </div>\n      </form>\n      <br/><br/>\n      <Output data={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}